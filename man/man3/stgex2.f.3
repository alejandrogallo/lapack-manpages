.TH "stgex2.f" 3 "Tue Nov 14 2017" "Version 3.8.0" "LAPACK" \" -*- nroff -*-
.ad l
.nh
.SH NAME
stgex2.f
.SH SYNOPSIS
.br
.PP
.SS "Functions/Subroutines"

.in +1c
.ti -1c
.RI "subroutine \fBstgex2\fP (WANTQ, WANTZ, \fBN\fP, A, \fBLDA\fP, B, \fBLDB\fP, Q, LDQ, Z, LDZ, J1, N1, N2, WORK, LWORK, INFO)"
.br
.RI "\fBSTGEX2\fP swaps adjacent diagonal blocks in an upper (quasi) triangular matrix pair by an orthogonal equivalence transformation\&. "
.in -1c
.SH "Function/Subroutine Documentation"
.PP 
.SS "subroutine stgex2 (logical WANTQ, logical WANTZ, integer N, real, dimension( lda, * ) A, integer LDA, real, dimension( ldb, * ) B, integer LDB, real, dimension( ldq, * ) Q, integer LDQ, real, dimension( ldz, * ) Z, integer LDZ, integer J1, integer N1, integer N2, real, dimension( * ) WORK, integer LWORK, integer INFO)"

.PP
\fBSTGEX2\fP swaps adjacent diagonal blocks in an upper (quasi) triangular matrix pair by an orthogonal equivalence transformation\&.  
.PP
\fBPurpose: \fP
.RS 4

.PP
.nf
 STGEX2 swaps adjacent diagonal blocks (A11, B11) and (A22, B22)
 of size 1-by-1 or 2-by-2 in an upper (quasi) triangular matrix pair
 (A, B) by an orthogonal equivalence transformation.

 (A, B) must be in generalized real Schur canonical form (as returned
 by SGGES), i.e. A is block upper triangular with 1-by-1 and 2-by-2
 diagonal blocks. B is upper triangular.

 Optionally, the matrices Q and Z of generalized Schur vectors are
 updated.

        Q(in) * A(in) * Z(in)**T = Q(out) * A(out) * Z(out)**T
        Q(in) * B(in) * Z(in)**T = Q(out) * B(out) * Z(out)**T
.fi
.PP
 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIWANTQ\fP 
.PP
.nf
          WANTQ is LOGICAL
          .TRUE. : update the left transformation matrix Q;
          .FALSE.: do not update Q.
.fi
.PP
.br
\fIWANTZ\fP 
.PP
.nf
          WANTZ is LOGICAL
          .TRUE. : update the right transformation matrix Z;
          .FALSE.: do not update Z.
.fi
.PP
.br
\fIN\fP 
.PP
.nf
          N is INTEGER
          The order of the matrices A and B. N >= 0.
.fi
.PP
.br
\fIA\fP 
.PP
.nf
          A is REAL array, dimension (LDA,N)
          On entry, the matrix A in the pair (A, B).
          On exit, the updated matrix A.
.fi
.PP
.br
\fILDA\fP 
.PP
.nf
          LDA is INTEGER
          The leading dimension of the array A. LDA >= max(1,N).
.fi
.PP
.br
\fIB\fP 
.PP
.nf
          B is REAL array, dimension (LDB,N)
          On entry, the matrix B in the pair (A, B).
          On exit, the updated matrix B.
.fi
.PP
.br
\fILDB\fP 
.PP
.nf
          LDB is INTEGER
          The leading dimension of the array B. LDB >= max(1,N).
.fi
.PP
.br
\fIQ\fP 
.PP
.nf
          Q is REAL array, dimension (LDQ,N)
          On entry, if WANTQ = .TRUE., the orthogonal matrix Q.
          On exit, the updated matrix Q.
          Not referenced if WANTQ = .FALSE..
.fi
.PP
.br
\fILDQ\fP 
.PP
.nf
          LDQ is INTEGER
          The leading dimension of the array Q. LDQ >= 1.
          If WANTQ = .TRUE., LDQ >= N.
.fi
.PP
.br
\fIZ\fP 
.PP
.nf
          Z is REAL array, dimension (LDZ,N)
          On entry, if WANTZ =.TRUE., the orthogonal matrix Z.
          On exit, the updated matrix Z.
          Not referenced if WANTZ = .FALSE..
.fi
.PP
.br
\fILDZ\fP 
.PP
.nf
          LDZ is INTEGER
          The leading dimension of the array Z. LDZ >= 1.
          If WANTZ = .TRUE., LDZ >= N.
.fi
.PP
.br
\fIJ1\fP 
.PP
.nf
          J1 is INTEGER
          The index to the first block (A11, B11). 1 <= J1 <= N.
.fi
.PP
.br
\fIN1\fP 
.PP
.nf
          N1 is INTEGER
          The order of the first block (A11, B11). N1 = 0, 1 or 2.
.fi
.PP
.br
\fIN2\fP 
.PP
.nf
          N2 is INTEGER
          The order of the second block (A22, B22). N2 = 0, 1 or 2.
.fi
.PP
.br
\fIWORK\fP 
.PP
.nf
          WORK is REAL array, dimension (MAX(1,LWORK)).
.fi
.PP
.br
\fILWORK\fP 
.PP
.nf
          LWORK is INTEGER
          The dimension of the array WORK.
          LWORK >=  MAX( N*(N2+N1), (N2+N1)*(N2+N1)*2 )
.fi
.PP
.br
\fIINFO\fP 
.PP
.nf
          INFO is INTEGER
            =0: Successful exit
            >0: If INFO = 1, the transformed matrix (A, B) would be
                too far from generalized Schur form; the blocks are
                not swapped and (A, B) and (Q, Z) are unchanged.
                The problem of swapping is too ill-conditioned.
            <0: If INFO = -16: LWORK is too small. Appropriate value
                for LWORK is returned in WORK(1).
.fi
.PP
 
.RE
.PP
\fBAuthor:\fP
.RS 4
Univ\&. of Tennessee 
.PP
Univ\&. of California Berkeley 
.PP
Univ\&. of Colorado Denver 
.PP
NAG Ltd\&. 
.RE
.PP
\fBDate:\fP
.RS 4
June 2017 
.RE
.PP
\fBFurther Details: \fP
.RS 4
In the current code both weak and strong stability tests are performed\&. The user can omit the strong stability test by changing the internal logical parameter WANDS to \&.FALSE\&.\&. See ref\&. [2] for details\&. 
.RE
.PP
\fBContributors: \fP
.RS 4
Bo Kagstrom and Peter Poromaa, Department of Computing Science, Umea University, S-901 87 Umea, Sweden\&. 
.RE
.PP
\fBReferences: \fP
.RS 4

.PP
.nf
  [1] B. Kagstrom; A Direct Method for Reordering Eigenvalues in the
      Generalized Real Schur Form of a Regular Matrix Pair (A, B), in
      M.S. Moonen et al (eds), Linear Algebra for Large Scale and
      Real-Time Applications, Kluwer Academic Publ. 1993, pp 195-218.

  [2] B. Kagstrom and P. Poromaa; Computing Eigenspaces with Specified
      Eigenvalues of a Regular Matrix Pair (A, B) and Condition
      Estimation: Theory, Algorithms and Software,
      Report UMINF - 94.04, Department of Computing Science, Umea
      University, S-901 87 Umea, Sweden, 1994. Also as LAPACK Working
      Note 87. To appear in Numerical Algorithms, 1996.
.fi
.PP
 
.RE
.PP

.PP
Definition at line 223 of file stgex2\&.f\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for LAPACK from the source code\&.
