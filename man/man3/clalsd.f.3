.TH "clalsd.f" 3 "Tue Nov 14 2017" "Version 3.8.0" "LAPACK" \" -*- nroff -*-
.ad l
.nh
.SH NAME
clalsd.f
.SH SYNOPSIS
.br
.PP
.SS "Functions/Subroutines"

.in +1c
.ti -1c
.RI "subroutine \fBclalsd\fP (UPLO, SMLSIZ, \fBN\fP, \fBNRHS\fP, D, E, B, \fBLDB\fP, RCOND, RANK, WORK, RWORK, IWORK, INFO)"
.br
.RI "\fBCLALSD\fP uses the singular value decomposition of A to solve the least squares problem\&. "
.in -1c
.SH "Function/Subroutine Documentation"
.PP 
.SS "subroutine clalsd (character UPLO, integer SMLSIZ, integer N, integer NRHS, real, dimension( * ) D, real, dimension( * ) E, complex, dimension( ldb, * ) B, integer LDB, real RCOND, integer RANK, complex, dimension( * ) WORK, real, dimension( * ) RWORK, integer, dimension( * ) IWORK, integer INFO)"

.PP
\fBCLALSD\fP uses the singular value decomposition of A to solve the least squares problem\&.  
.PP
\fBPurpose: \fP
.RS 4

.PP
.nf
 CLALSD uses the singular value decomposition of A to solve the least
 squares problem of finding X to minimize the Euclidean norm of each
 column of A*X-B, where A is N-by-N upper bidiagonal, and X and B
 are N-by-NRHS. The solution X overwrites B.

 The singular values of A smaller than RCOND times the largest
 singular value are treated as zero in solving the least squares
 problem; in this case a minimum norm solution is returned.
 The actual singular values are returned in D in ascending order.

 This code makes very mild assumptions about floating point
 arithmetic. It will work on machines with a guard digit in
 add/subtract, or on those binary machines without guard digits
 which subtract like the Cray XMP, Cray YMP, Cray C 90, or Cray 2.
 It could conceivably fail on hexadecimal or decimal machines
 without guard digits, but we know of none.
.fi
.PP
 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIUPLO\fP 
.PP
.nf
          UPLO is CHARACTER*1
         = 'U': D and E define an upper bidiagonal matrix.
         = 'L': D and E define a  lower bidiagonal matrix.
.fi
.PP
.br
\fISMLSIZ\fP 
.PP
.nf
          SMLSIZ is INTEGER
         The maximum size of the subproblems at the bottom of the
         computation tree.
.fi
.PP
.br
\fIN\fP 
.PP
.nf
          N is INTEGER
         The dimension of the  bidiagonal matrix.  N >= 0.
.fi
.PP
.br
\fINRHS\fP 
.PP
.nf
          NRHS is INTEGER
         The number of columns of B. NRHS must be at least 1.
.fi
.PP
.br
\fID\fP 
.PP
.nf
          D is REAL array, dimension (N)
         On entry D contains the main diagonal of the bidiagonal
         matrix. On exit, if INFO = 0, D contains its singular values.
.fi
.PP
.br
\fIE\fP 
.PP
.nf
          E is REAL array, dimension (N-1)
         Contains the super-diagonal entries of the bidiagonal matrix.
         On exit, E has been destroyed.
.fi
.PP
.br
\fIB\fP 
.PP
.nf
          B is COMPLEX array, dimension (LDB,NRHS)
         On input, B contains the right hand sides of the least
         squares problem. On output, B contains the solution X.
.fi
.PP
.br
\fILDB\fP 
.PP
.nf
          LDB is INTEGER
         The leading dimension of B in the calling subprogram.
         LDB must be at least max(1,N).
.fi
.PP
.br
\fIRCOND\fP 
.PP
.nf
          RCOND is REAL
         The singular values of A less than or equal to RCOND times
         the largest singular value are treated as zero in solving
         the least squares problem. If RCOND is negative,
         machine precision is used instead.
         For example, if diag(S)*X=B were the least squares problem,
         where diag(S) is a diagonal matrix of singular values, the
         solution would be X(i) = B(i) / S(i) if S(i) is greater than
         RCOND*max(S), and X(i) = 0 if S(i) is less than or equal to
         RCOND*max(S).
.fi
.PP
.br
\fIRANK\fP 
.PP
.nf
          RANK is INTEGER
         The number of singular values of A greater than RCOND times
         the largest singular value.
.fi
.PP
.br
\fIWORK\fP 
.PP
.nf
          WORK is COMPLEX array, dimension (N * NRHS).
.fi
.PP
.br
\fIRWORK\fP 
.PP
.nf
          RWORK is REAL array, dimension at least
         (9*N + 2*N*SMLSIZ + 8*N*NLVL + 3*SMLSIZ*NRHS +
         MAX( (SMLSIZ+1)**2, N*(1+NRHS) + 2*NRHS ),
         where
         NLVL = MAX( 0, INT( LOG_2( MIN( M,N )/(SMLSIZ+1) ) ) + 1 )
.fi
.PP
.br
\fIIWORK\fP 
.PP
.nf
          IWORK is INTEGER array, dimension (3*N*NLVL + 11*N).
.fi
.PP
.br
\fIINFO\fP 
.PP
.nf
          INFO is INTEGER
         = 0:  successful exit.
         < 0:  if INFO = -i, the i-th argument had an illegal value.
         > 0:  The algorithm failed to compute a singular value while
               working on the submatrix lying in rows and columns
               INFO/(N+1) through MOD(INFO,N+1).
.fi
.PP
 
.RE
.PP
\fBAuthor:\fP
.RS 4
Univ\&. of Tennessee 
.PP
Univ\&. of California Berkeley 
.PP
Univ\&. of Colorado Denver 
.PP
NAG Ltd\&. 
.RE
.PP
\fBDate:\fP
.RS 4
December 2016 
.RE
.PP
\fBContributors: \fP
.RS 4
Ming Gu and Ren-Cang Li, Computer Science Division, University of California at Berkeley, USA 
.br
 Osni Marques, LBNL/NERSC, USA 
.br
 
.RE
.PP

.PP
Definition at line 188 of file clalsd\&.f\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for LAPACK from the source code\&.
